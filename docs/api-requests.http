### API Requests dla Systemu Typowania Meczów Piłki Nożnej
### Plik do uruchamiania w Rider HTTP Client

### ========================================
### KONFIGURACJA
### ========================================

@baseUrl = https://localhost:5001/api
@authToken = {{login.response.body.accessToken}}
@refreshToken = {{login.response.body.refreshToken}}

### ========================================
### AUTORYZACJA
### ========================================

### Rejestracja nowego użytkownika
# @name register
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "login": "testuser",
  "password": "testpassword123",
  "email": "test@example.com"
}

### Logowanie użytkownika
# @name login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "login": "testuser",
  "password": "testpassword123"
}

### Odświeżenie tokenu
# @name refresh
POST {{baseUrl}}/auth/refresh
Content-Type: application/json

{
  "refreshToken": "{{refreshToken}}"
}

### Wylogowanie
# @name logout
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "refreshToken": "{{refreshToken}}"
}

### ========================================
### ZARZĄDZANIE STOŁAMI
### ========================================

### Utworzenie nowego stołu (z automatyczną rejestracją użytkownika)
# @name createTable
POST {{baseUrl}}/tables
Content-Type: application/json

{
  "userLogin": "adminuser",
  "userPassword": "adminpassword123",
  "tableName": "Mistrzostwa Świata 2026",
  "tablePassword": "tablepassword123",
  "maxPlayers": 10,
  "stake": 50.00
}

### Dołączenie do istniejącego stołu
# @name joinTable
POST {{baseUrl}}/tables/join
Content-Type: application/json

{
  "userLogin": "testuser",
  "userPassword": "testpassword123",
  "tableName": "Mistrzostwa Świata 2026",
  "tablePassword": "tablepassword123"
}

### Pobranie listy stołów użytkownika
# @name getUserTables
GET {{baseUrl}}/tables
Authorization: Bearer {{authToken}}

### Pobranie wszystkich informacji o stole (mecze, użytkownicy, typy, wygrane)
# @name getTableDashboard
GET {{baseUrl}}/tables/{{tableId}}/dashboard
Authorization: Bearer {{authToken}}

### Pobranie szczegółów stołu (podstawowe informacje)
# @name getTableDetails
GET {{baseUrl}}/tables/{{tableId}}
Authorization: Bearer {{authToken}}

### Wylogowanie ze stołu
# @name leaveTable
DELETE {{baseUrl}}/tables/{{tableId}}/members
Authorization: Bearer {{authToken}}

### ========================================
### ZARZĄDZANIE ADMINISTRATORAMI
### ========================================

### Przekazanie roli administratora
# @name grantAdmin
POST {{baseUrl}}/tables/{{tableId}}/admins
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "userId": "{{targetUserId}}"
}

### Odebranie roli administratora
# @name revokeAdmin
DELETE {{baseUrl}}/tables/{{tableId}}/admins/{{targetUserId}}
Authorization: Bearer {{authToken}}

### ========================================
### ZARZĄDZANIE MECZAMI
### ========================================

### Dodanie nowego meczu (tylko admin)
# @name createMatch
POST {{baseUrl}}/tables/{{tableId}}/matches
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "country1": "Polska",
  "country2": "Niemcy",
  "matchDateTime": "2026-06-15T20:00:00Z"
}

### Pobranie szczegółów meczu
# @name getMatchDetails
GET {{baseUrl}}/tables/{{tableId}}/matches/{{matchId}}
Authorization: Bearer {{authToken}}

### Aktualizacja meczu (tylko admin, przed rozpoczęciem)
# @name updateMatch
PUT {{baseUrl}}/tables/{{tableId}}/matches/{{matchId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "country1": "Polska",
  "country2": "Niemcy",
  "matchDateTime": "2026-06-15T21:00:00Z"
}

### Usunięcie meczu (tylko admin, przed rozpoczęciem)
# @name deleteMatch
DELETE {{baseUrl}}/tables/{{tableId}}/matches/{{matchId}}
Authorization: Bearer {{authToken}}

### ========================================
### WYNIKI MECZÓW
### ========================================

### Wprowadzenie wyniku meczu (tylko admin)
# @name setMatchResult
PUT {{baseUrl}}/tables/{{tableId}}/matches/{{matchId}}/result
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "score1": 2,
  "score2": 1
}

### ========================================
### TYPOWANIE MECZÓW
### ========================================

### Dodanie/aktualizacja typu na mecz
# @name placeBet
POST {{baseUrl}}/tables/{{tableId}}/matches/{{matchId}}/bets
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "prediction": "2:1"
}

### Pobranie typu użytkownika na mecz
# @name getUserBet
GET {{baseUrl}}/tables/{{tableId}}/matches/{{matchId}}/bets/my
Authorization: Bearer {{authToken}}

### Usunięcie typu (przed rozpoczęciem meczu)
# @name deleteBet
DELETE {{baseUrl}}/tables/{{tableId}}/matches/{{matchId}}/bets
Authorization: Bearer {{authToken}}

### Pobranie globalnych statystyk użytkownika
# @name getGlobalStats
GET {{baseUrl}}/users/stats
Authorization: Bearer {{authToken}}

### ========================================
### KRAJE/DRUŻYNY
### ========================================

### Pobranie listy krajów (autocomplete)
# @name getCountries
GET {{baseUrl}}/countries?search=pol
Authorization: Bearer {{authToken}}

### Pobranie wszystkich krajów
# @name getAllCountries
GET {{baseUrl}}/countries
Authorization: Bearer {{authToken}}

### ========================================
### ZARZĄDZANIE UŻYTKOWNIKAMI
### ========================================

### Pobranie profilu użytkownika
# @name getUserProfile
GET {{baseUrl}}/users/me
Authorization: Bearer {{authToken}}

### Aktualizacja profilu użytkownika
# @name updateUserProfile
PUT {{baseUrl}}/users/me
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "email": "newemail@example.com"
}

### Zmiana hasła użytkownika
# @name changePassword
PUT {{baseUrl}}/users/me/password
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "currentPassword": "testpassword123",
  "newPassword": "newpassword123"
}

### ========================================
### HEALTH CHECKS
### ========================================

### Sprawdzenie stanu API
# @name healthCheck
GET {{baseUrl}}/health

### Sprawdzenie połączenia z bazą danych
# @name dbHealthCheck
GET {{baseUrl}}/health/db

### ========================================
### PRZYKŁADOWE ZMIENNE
### ========================================

# Zastąp te wartości rzeczywistymi ID z odpowiedzi API
@tableId = 123e4567-e89b-12d3-a456-426614174000
@matchId = 456e7890-e89b-12d3-a456-426614174001
@targetUserId = 789e0123-e89b-12d3-a456-426614174002

### ========================================
### INSTRUKCJE UŻYTKOWANIA
### ========================================

# 1. Najpierw uruchom rejestrację lub logowanie
# 2. Skopiuj token z odpowiedzi do zmiennej @authToken
# 3. Użyj rzeczywistych ID z odpowiedzi API w zmiennych @tableId, @matchId, itp.
# 4. Endpointy wymagające autoryzacji używają Bearer token
# 5. Wszystkie daty w formacie ISO 8601 (UTC)
# 6. Kwoty w złotówkach (decimal)
# 7. Hasła minimum 10 znaków 